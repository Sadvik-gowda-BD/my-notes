Interview Springboot & Micrpo services


Microservices/ springboot,

Q&A

Q1. What Is Spring Boot and What Are Its Main components/Features?
Starters – a set of dependency descriptors to include relevant dependencies at a go
Auto-configuration – a way to automatically configure an application based on the dependencies present on the classpath
Actuator – to get production-ready features such as monitoring
Spring Initializer
Spring CLI
Security – to provide authentication and authorization
Logging – to record events at certain points during program execution

Q)What is spring IOC? - Inversion of Control Container 
Spring IoC container is the program that injects dependencies into an object and make it ready for our use. It manages the beans lifecycle etc.
It implements the concept of dependency injection (DI)

P)2 types spring IOC contaiiner: BeanFactory and ApplicationContext 

P)A bean is an object that is managed by the Spring IoC (Inversion of Control) container. 

Q)What is Dependency Injection.
Spring injects bean to its depnedent class. (For example ControllerClass is depend on ServiceClass, here spring create a bean of service class and it injects to variable)

Q)What is springboot starter dependency
In Spring Boot, a "starter" is a set of convenient dependency descriptors that you can include in your application. Starters are used to simplify the process of setting up and configuring a Spring Boot application. They provide a way to include a group of related dependencies with a single dependency declaration, eliminating the need to manually specify each individual dependency.

Why we need?: Quick Setup:, Developers do not need to know the names of the dependencies required for an application, Developers do not need to know the exact version of the dependencies to use
for ex: springboot-starter-web will be include tomacat dependency, springboot-starter-test will include junit and mockit, power mock all test related dependency

Q)Describe spring-boot-starter-parent?
It is a unique starter which adds jars to the classpath for easy Maven or Gradle dependency management.

Q)Stereo type annotations
component, controller, service, repository

Q)Use of response body
The @ResponseBody annotation tells view name is not sending to the dispatcher servlet and sending only the response object, the returned object is automatically serialized into JSON and passed back into the HttpResponse object.

Q)Difference between Controller and RestController

	@Controller - It returns a View object(MAV) that is responsible for rendering a web page that can be viewed by the user. 
	@RestController - It returns a ResponseBody object that contains data in a format such as JSON or XML that can be consumed by other applications.
					@RestController = @Controller + @ResponseBody

Q)Difference between ControllerAdvice and RestControllerAdvice
	@ControllerAdvice is used for handling exceptions in web applications and returns a view as a response
	@RestControllerAdvice is used for handling exceptions in RESTful web services and returns a JSON or XML response.

		
Q)Ways of communication in microservices
	1)HTTP service - REST API calls  - Mostly sync call , this can be async also
	2)gRPC - open-source Remote Procedure Call (RPC) 
	3)Message Brokers / Event driven MSA -Kafka/RabbitMQ - Mostly Async calls
	4)Websockets

P) Websockets used in:
Used when bidirectional communication is required.
Ex:
Real-Time Applications: Chat app, multi-player game
Live Updates: stock app, sports app to update score, auction etc
Dashboard
	
Q)What are stereotype annotation?
It is used to mark a Java class as a bean.
 @Component, @Controller , @Service and @Repository

	@Component
		It is a class-level annotation. It is used to denote a class as a Component.
		We can use @Component across the application to mark the beans as Spring’s managed components.
		
	@Controller
		It is a stereotype for the presentation layer (spring-MVC). It is also specialization of @Component Annotation.
		It’s used to mark a class as a web request handler.
		We cannot switch this annotation with any other like @Service or @Repository. 
		
		
	@Service
	It is a stereotype for the service layer. It is also specialization of @Component Annotation.
	It is used to mark the class as a service provider.
	Switch can be possible. But it is not recommended. 
	
	@Repository
	It is also a stereotype for the DAO layer. It is also specialization of @Component Annotation.
	It is used to mark the interface as DAO (Data Access Object) provider.
	Switch can be possible. But it is not recommended. 
	
Q)Can we use @Component/@Service in place of @Controller ?
No we cant't TODO check

Q)In which scenerio, you'll use singleton and prototype scope?
singleton scope should be used with EJB stateless session bean and prototype scope with EJB stateful session bean.

Q)What is auto configuration
Automatically configure the spring property values into the bean. For example database properties into DataSourceAutoConfiguration.class

Q) How to exclude auto configuration in springboot

	Ex1: Application main class
	@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class, DataSourceTransactionManagerAutoConfiguration.class, HibernateJpaAutoConfiguration.class})
	
	Ex2: properties file
	spring.autoconfigure.exclude= \org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration, \org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration
	
Q)How to Register a Custom Auto-Configuration?
we can below property in properties file
org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.baeldung.autoconfigure.CustomAutoConfiguration

Q)How many request can springboot handle simultaneously?
It is does not depend on spring boot frame work iself, it is depend on embedded container (like Tomcat, Undertow, Jetty).

	we can see the default configuration on autoconfigure jar C:org\......\spring-boot-autoconfigure-3.2.5.jar!\META-INF\spring-configuration-metadata.json
	The default config is:
	"name": "server.tomcat.max-connections", "defaultValue": 8192 //number of request simultaneously
	"name": "server.tomcat.accept-count", "defaultValue": 100 //number of request can be in waiting
	
	We can also override this value in properties file.
	Ex:- server.tomcat.max-connections: 8000
		 server.tomcat.accept-count: 200

Q)What Is Spring Boot Actuator Used For?
	/env exposes environment properties
	/health shows application health information
	/httptrace displays HTTP trace information
	/info displays arbitrary application information
	/metrics shows metrics information
	loggers shows and modifies the configuration of loggers in the application
	mappings displays a list of all @RequestMapping paths
	It also shows the circuit breaker status

Q)How to establish relationship between two Entities
	


1)What is the use of the @pathVariable over @RequestParam?

In both values can be declare as optional. but in path variable it makes confuse when there is multiple vlues link /employee/{id1}/{id2}/{id3} , we can't give id1 as optional by sepcifing id2 and id3

	1) @pathVariable
	localhost:8443/employee/get/{id}
	It is not URL encoded	-> localhost:8443/employee/get/ab+c result of id is a+b
	Default value cannot be mention
----
ID: ab+c
	
	2)@RequestParam
	localhost:8443/emplyee/get/name=virat?company=HCL?location=Bengaluru    
	It is URL encoded (encoded url :- localhost%3A8443%2Femplyee%2Fget%2Fname%3Dvirat%3Fcompany%3DHCL%3Flocation%3DBengaluru)
	
	localhost:8443/employee/get/id=ab+c result of id is a b (here + is removed because of URL encode)
	Default value can be sepecified  @RequestParam(defaultValue = "0", name = "age", required = false) String age)

Q)Why URL encoding is required
URLs can contain characters that are not safe or meaningful in their raw form. Special characters like spaces, ampersands (&), question marks (?), slashes (/), and others have special meanings in URLs. URL encoding converts these characters into a format that can be safely transmitted over the web.

Q)Why microservice is better than monolithic

	Monolothic
		All services will be available in single instance
		New technology barriers :- Can't able to use different technologies because all services are in single project
		if we need to scale up we need to do for whole big application 
		If application goes down then it effect all services
		Maintainance cost is low

	Microservices
		Each services has it's own MSA and instance
		Different technology can be used for different services.
		We can scale-up most demanded service
		If one service goes down, it will not effect other services. (If register service goes down, still payment service can be work independently)
		Maintainance cost is high

Difference between @PropertySource and @ConfigurationProperties
@PropertySource is to reference a properties file and load it into the Spring environment (where it may be used by @ConfigurationProperties or @Value). @Value is to inject a particular property value by its key into a variable (member field or constructor argument).

ex:- 
	@PropertySource("classpath:foo.properties")
	@ConfigurationProperties(prefix = "myserver.allvalues")

Q)
@Configuration:
	Used to define a configuration class that contains bean definitions.
	Focused on creating and configuring beans within the Spring context.
@ConfigurationProperties:
	Used to bind external configuration properties to a Java object.
	Focused on externalizing configuration and mapping it to a structured, type-safe bean.
	Ex:- ConfigurationProperties(prefix = "app")
	
	
Q)How Singleton bean works when multiple request comes at same time
	Here we won't get any concurrency issue because 
		->Two different thread will have their own exection context which won't overlap with each other
		->Singleton bean is a stateless
		
		->Since the Singleton bean is shared, it needs to be thread-safe if it handles state that could be modified by concurrent requests. If the bean is stateless (it doesn't store any information that changes per request), it doesn't require special handling for concurrency.


======= Explaination

1)Callback method
A callback operation in Java is one method that is passed to another method and executed after some action is completed.
Ex:- 
a) In kafka
 CompletableFuture<SendResult<String, Object>> future = kafkaTemplate.send(topic1, "Hello how r u");
		//Callback method
        future.whenComplete((result, ex) -> {
            if (ex != null) {
                System.out.println("Exception occurred");
                throw new RuntimeException("Exceptio in publisher", ex);
       0     }
            System.out.println("Message sent successfully. Offset " + result.getRecordMetadata().offset());
        });
		
b)initialzation and destruction in bean lifecycle
@PostConstruct and @PreDestroy

@PostConstruct: Used to execute logic after the bean is initialized and dependencies are injected. (After invoking the constructor)
@PreDestroy: Used to execute cleanup logic just before the bean is destroyed. This method is executed when the Spring context is shutting down or the bean is being destroyed (e.g., in case of an application shutdown).		
		
		
2)Async call in springboot
 

Q)logpattern

Q)Microservices patterns


3)In memory Cache in springboot database
SimpleCacheManager --> Spring's default cache manager, that's used if you don't specify a cache manager. It's simple because its underlying implementation uses a Java ConcurrentHashMap and it doesn't give you a whole lot of customization options.

CaffeineCacheManager --> The Caffeine Cache manager is slightly different, in that there are more configuration-driven customization options such as having the ability to specify the cache timeout expiry limit (in order to 'bust' the cache after a certain time period) and the cache maximum size limit in order to limit the capacity of the cache.

6)Redies - distribution cache
Redies is a in-memory data structure store used as a database cache.
Run on its own server


4)How to increase MSA performance
Implemnent circuit breaker to save the resource
Implement in memory cache
add index to DB
added cache for ping JWT call

Q)How sensitive data like password maintained in springboot properties file?
1)Sensitive data can be send via commandline arguments at run time. Ex:- mvn spring-boot:run -Dspring.datasource.password=secretpassword
2)Sensitive data can be encrypted in property file and it can decrypt at run time using Jasypt library. Secret key for encyption and decryption can be pass from command line argument/ kubernetes environment varibale
	Ex:- In properties file password:ENC(encrypted key) -> ENC(scEjemHosjc/hjA8saT7Y6uC65bs0swg)
		 >mvn spring-boot:run -Djasypt.encryptor.password=secretkey
		 
3)We can use vault servers like ansible vault, spring cloud vault by HashiCorp etc.

5)Circuitbreaker
It is design pattern to handle failure services. 
we can implement fallbackMethod to return the default messages
Here we save resource(JWT call etc) by not invoking the failed microservice, instead we return default message. (When circuit is open)
we also can implement retry mechanism.

6)Service discovery/ service registry/ Eureka server
In Microservices, Service Discovery helps us by providing a database of available service instances so that services can be discovered, registered, and de-registered based on usage.
This registry keeps track of all entries of individual services (client instances) IP address & port.
It is the client side service discovery, because assume we are calling PAYMENT-SERVICE from CUSTOMER-SERVICE, these 2 are clients of BANK-SERVICE-REGISTRY (Eureka server/service registry).
when we make a call from CUSTOMER-SERVICE to PAYMENT-SERVICE, at first CUSTOMER-SERVICE call service registry (BANK-SERVICE-REGISTRY) and get the ip address of PAYMENT-SERVICE and then it will invoke PAYMENT-SERVICE.

7)API gateway
It receives incoming requests, performs authentication & routing (if enabled) and forwards requests to actual microservice.
It should register in service registry so it can identify the other services 

8)Handle Error response from other microservices


===========Spring data JPA
What is ORM?
Object Relational Mapping (ORM) is a functionality which is used to develop and maintain a relationship between an object and relational database by mapping an object state to database column. It is capable to handle various database operations easily such as inserting, updating, deleting etc.
Ex:- Hibernate, TopLink, iBATIS etc

Q)JPA - Java Persistance API
It is specification provided by Java and implemented by ORM providers.
At any time we can change our project from Hibernate to other orm without effecting our springboot code.


Q)spring.jpa.hibernate.ddl-auto
values are CREATE UPDATE CREATE-DROP NONE, Recommended to use NONE in production,
because table structure modify happens by using SQL query by DBA spring.jpa.hibernate.ddl-auto=none

P)@Modifying and @Transactional is mandatory for update and delete queries in JPA repository
 
 -cascade
 fetch types
 
 P) If one class has Relationship like oneToOne/OneToMany/ManyToOne then in other class will be used as mappedBy in Bidirectional mapping.
 For ManyToMany relationship we need to provide table name and inverse TODO
    

======================================


Microservice Design patterns

1)Database per service
2)Shared Database per service
3)Saga pattern
4)Strangler pattern
5)Service Discovery Pattern/ service registry pattern
6)API gateway pattern
7)Change data capture (CDC) pattern
8)Circuit breaker pattern
9)Sidecar

Saga pattern
	Implement each business transaction that spans multiple services as a saga. A saga is a sequence of local transactions. Each local transaction updates the database and publishes a message or event to trigger the next local transaction in the saga. If a local transaction fails because it violates a business rule then the saga executes a series of compensating transactions that undo the changes that were made by the preceding local transactions.
	Uses Kafka, etc

Simple explation
In microservices it's difficult to handl the transaction if each microservices uses different database, in that time below methods helps to resolve this issue.

It can be achieve by 2 ways:- 1)Orchestration and 2)Choreography

example of Choreography by using KAFKA,
Assume there is an oder service and payment service, when we place an order order-service publish order-event, then payment-service consume order-event message and process like debit amount if there is a sufficient balance, then publish payment-event with success or failure. Then order-service consume payment-event and update the database with order placed successfully or not.

Service Discovery Pattern/ service registry pattern:-
	The service discovery pattern, also known as the service registry pattern, is a microservices pattern that provides discovery of the service locations in an environment where all microservices live. A service registry is simply a database of services that the other service accesses to find the address data of the other services

strangler pattern:
	Problem
		How do you migrate a legacy monolithic application to a microservice architecture?

	Solution
		The strangler pattern is a microservices pattern that helps you migrate a monolith application to a microservice application. Implementing the pattern requires an incremental process for developing new microservices while keeping the monolith running.
		The strangler application consists of two types of services. First, there are services that implement functionality that previously resided in the monolith. Second, there are services that implement new features. The latter are particularly useful since they demonstrate to the business the value of using microservices.

API gateway pattern:-
	When working with microservices, you shouldn’t directly expose the individual API endpoints of each microservice.
	This pattern provides a single entry point for all clients of a microservice-based application.
	We can implement security mechanism

Circuit breaker pattern
	Used to handle the fault toluratance

Change data capture (CDC) pattern

Sidecar
Same pod contains 2 container - one for main application and other for sidercar application.
Main application can have business logic and sidecar can have logging, monitoring, configs, alaraming etc

Q)Swagger 
Swagger in Spring Boot is an open-source project that helps generate documents of REST APIs for RESTful web services via a web browser. 
Whenever update happens to api, swagger will take care of re-document, dev no need to worry.
It is used as:
		Develop API, Interact with API, Document API's	
		
		
Q)Difference between get() and load() in hibernate?

get()	
	-Customer customer = (Customer) session.get(Customer.class, 1L);
	- Eager intialization
	- Use when we need complete object
	- get() method returns null if there is no object present in the database.
	- get() method only hits the database if the object is not present in the session cache. If the same object is already present in the cache then it returns previously stored data from the cache.
	- get() method is used to retrieve a persistent object from the database. It is a member of the Session interface, and it takes the class of the object to be retrieved and the primary key of the object as arguments.

load()
	- Lazy intialization
	- Use when we don't need complete object which includes foreign key object
	- load() method throws ObjectNotFoundException if there is no object found in the database.
	-load() method does not retrieve the object from the database when it is called. Instead, it returns a proxy object that represents the object. The actual object is only 		retrieved from the database when it is needed, such as when a method of the object is called or a property is accessed. This technique is known as “lazy loading” and it is used to improve the performance of Hibernate by avoiding unnecessary database queries.
	-load() method is used to retrieve an object from the database by its identifier (primary key). It is used to initialize a proxy object instead of a fully-initialized object, so it can be used to lazily load the object when it is needed.


Q)What is springboot CLI
Spring Boot CLI (Command Line Interface) is a command line software or tool. This tool is provided by the Spring framework for quickly developing and testing Spring Boot applications from the command prompt.

->Frist we need install the sprinboot CLI tool and set bin path in env variables
->we can use by running the commands

commands:
	>spring version
	>spring init --dependencies=web,data-jpa my-project //to create a new project from the CLI with name my-project
	>spring run HelloWorld.groovy
	>mvn spring-boot:run

Q)Difference between Junit and Mockito
	Junit:
		->we use JUnit to run the testing logic and confirm the test outcome
		->It provides a set of annotations, assertions, and test runners to create, manage, and run test cases.
		->Ex annotations:- @Test, @BeforeEach, @AfterEach, @BeforeAll, @AfterAll, @Disabled, @DisplayName, @ExtendWith(), assertEquals, assertTrue, assertNotNull etc. 
	
	Mockito:
		->Mockito is a framework that helps us generate objects (mocks) of certain classes and control their behavior during testing
		->It allows developers to create stubs and mocks for external dependencies, ensuring that unit tests remain isolated and focused on the code being tested.
		->Ex annotations:- @Mock, @InjectMocks, @Spy, @Captor, MockitoExtension.class, Mockito.when.
	

Q)Stubbing
	Stubs are usually handwritten, and some are generated by tools.
	
Q)What is distributed tracing in microservices?
Distributed tracing in microservices is a technique used to track and observe requests as they propagate through various services within a microservices architecture. It provides visibility into how a single request moves across different services, making it easier to diagnose issues, optimize performance, and understand the flow of transactions.
	spring-cloud-starter-sleuth
	spring-cloud-starter-zipkin


Q)Queries in springboot
	
	 // HQL query
    @Query("SELECT s FROM Student s WHERE s.age > :age")
    List<Student> findStudentsOlderThan(@Param("age") int age);
	
	// JPQL query
    @Query("SELECT s FROM Student s WHERE s.name = :name")
    List<Student> findStudentsByName(@Param("name") String name);
	
	// Native SQL query
    @Query(value = "SELECT * FROM student WHERE age > :age", nativeQuery = true)
    List<Student> findStudentsOlderThanNative(@Param("age") int age);
	
	HQL and JPQL work on entity properties (e.g., Student's fields like age and name).
	Native SQL works directly on database tables and columns (e.g., student table, age column).


spring-cloud-starter-zipkin
TODO:
Swagger
filters
Api gateway and Eureka server
profilers



